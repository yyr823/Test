在讲解元注解概念之前，我们先建立元数据的概念。 元数据在英语中对应单词 metadata, metadata在wiki中的解释是：
Metadata is data [information] that provides information about other data
为其他数据提供信息的数据
这样元注解就好理解了，元注解 meta annotation用于注解 自定义注解 的注解。
(元注解是一种基本注解，但是它能够应用到其它的注解上面)

* 注解的属性也叫做成员变量。注解只有成员变量，没有方法。
* 注解的成员变量在注解的定义中以“无形参的方法”形式来声明，
* 其方法名定义了该成员变量的名字，其返回值定义了该成员变量的类型
* 注解中属性可以有默认值，默认值需要用 default 关键值指定
元注解有这么几种：
@Target 
@Retention 
@Inherited 
@Documented 
@Repeatable (java1.8 新增) 


@Target 表示这个注解能放在什么位置上，是只能放在类上？还是即可以放在方法上，又可以放在属性上。自定义注解@JDBCConfig 这个注解上的@Target是：@Target({METHOD,TYPE})，表示他可以用在方法和类型上（类和接口），但是不能放在属性等其他位置。 可以选择的位置列表如下：
ElementType.TYPE：能修饰类、接口或枚举类型
ElementType.FIELD：能修饰成员变量
ElementType.METHOD：能修饰方法
ElementType.PARAMETER：能修饰参数
ElementType.CONSTRUCTOR：能修饰构造器
ElementType.LOCAL_VARIABLE：能修饰局部变量
ElementType.ANNOTATION_TYPE：能修饰注解
ElementType.PACKAGE：能修饰包


@Retention 表示生命周期
@Retention可选的值有3个：

RetentionPolicy.SOURCE： 
注解只在源代码中存在，编译成class之后，就没了。@Override 就是这种注解。
RetentionPolicy.CLASS： 
注解在java文件编程成.class文件后，依然存在，但是运行起来后就没了。@Retention的默认值，即当没有显式指定@Retention的时候，就会是这种类型。
RetentionPolicy.RUNTIME：
 注解在运行起来之后依然存在，程序可以通过反射获取这些信息，自定义注解@JDBCConfig 就是这样。
 
 
 @Inherited 表示该注解具有继承性。
设计一个DBUtil的子类，其getConnection2方法，可以获取到父类DBUtil上的注解信息。



@Documented 如图所示， 在用javadoc命令生成API文档后，DBUtil的文档里会出现该注解说明。
注： 使用eclipse把项目中的.java文件导成API文档步骤：
1. 选中项目
2. 点开菜单File
3. 点击Export
4. 点开java->javadoc->点next
5. 点finish

@Repeatable
当没有@Repeatable修饰的时候，注解在同一个位置，只能出现一次，如例所示：
@JDBCConfig(ip = "127.0.0.1", database = "test", encoding = "UTF-8", loginName = "root", password = "admin")
@JDBCConfig(ip = "127.0.0.1", database = "test", encoding = "UTF-8", loginName = "root", password = "admin")
重复做两次就会报错了。 
使用@Repeatable之后，再配合一些其他动作，就可以在同一个地方使用多次了。